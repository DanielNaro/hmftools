/*
 * This file is generated by jOOQ.
*/
package org.ensembl.database.homo_sapiens_core;


import javax.annotation.Generated;

import org.ensembl.database.homo_sapiens_core.tables.AltAllele;
import org.ensembl.database.homo_sapiens_core.tables.AltAlleleGroup;
import org.ensembl.database.homo_sapiens_core.tables.Analysis;
import org.ensembl.database.homo_sapiens_core.tables.AnalysisDescription;
import org.ensembl.database.homo_sapiens_core.tables.Assembly;
import org.ensembl.database.homo_sapiens_core.tables.AssemblyException;
import org.ensembl.database.homo_sapiens_core.tables.AssociatedGroup;
import org.ensembl.database.homo_sapiens_core.tables.AssociatedXref;
import org.ensembl.database.homo_sapiens_core.tables.AttribType;
import org.ensembl.database.homo_sapiens_core.tables.CoordSystem;
import org.ensembl.database.homo_sapiens_core.tables.DataFile;
import org.ensembl.database.homo_sapiens_core.tables.DensityFeature;
import org.ensembl.database.homo_sapiens_core.tables.DensityType;
import org.ensembl.database.homo_sapiens_core.tables.DependentXref;
import org.ensembl.database.homo_sapiens_core.tables.Ditag;
import org.ensembl.database.homo_sapiens_core.tables.DitagFeature;
import org.ensembl.database.homo_sapiens_core.tables.Dna;
import org.ensembl.database.homo_sapiens_core.tables.DnaAlignFeature;
import org.ensembl.database.homo_sapiens_core.tables.DnaAlignFeatureAttrib;
import org.ensembl.database.homo_sapiens_core.tables.Exon;
import org.ensembl.database.homo_sapiens_core.tables.ExonTranscript;
import org.ensembl.database.homo_sapiens_core.tables.ExternalDb;
import org.ensembl.database.homo_sapiens_core.tables.ExternalSynonym;
import org.ensembl.database.homo_sapiens_core.tables.Gene;
import org.ensembl.database.homo_sapiens_core.tables.GeneAttrib;
import org.ensembl.database.homo_sapiens_core.tables.GenomeStatistics;
import org.ensembl.database.homo_sapiens_core.tables.IdentityXref;
import org.ensembl.database.homo_sapiens_core.tables.Interpro;
import org.ensembl.database.homo_sapiens_core.tables.IntronSupportingEvidence;
import org.ensembl.database.homo_sapiens_core.tables.Karyotype;
import org.ensembl.database.homo_sapiens_core.tables.Map;
import org.ensembl.database.homo_sapiens_core.tables.MappingSession;
import org.ensembl.database.homo_sapiens_core.tables.MappingSet;
import org.ensembl.database.homo_sapiens_core.tables.Marker;
import org.ensembl.database.homo_sapiens_core.tables.MarkerFeature;
import org.ensembl.database.homo_sapiens_core.tables.MarkerMapLocation;
import org.ensembl.database.homo_sapiens_core.tables.MarkerSynonym;
import org.ensembl.database.homo_sapiens_core.tables.Meta;
import org.ensembl.database.homo_sapiens_core.tables.MetaCoord;
import org.ensembl.database.homo_sapiens_core.tables.MiscAttrib;
import org.ensembl.database.homo_sapiens_core.tables.MiscFeature;
import org.ensembl.database.homo_sapiens_core.tables.MiscFeatureMiscSet;
import org.ensembl.database.homo_sapiens_core.tables.MiscSet;
import org.ensembl.database.homo_sapiens_core.tables.ObjectXref;
import org.ensembl.database.homo_sapiens_core.tables.OntologyXref;
import org.ensembl.database.homo_sapiens_core.tables.Operon;
import org.ensembl.database.homo_sapiens_core.tables.OperonTranscript;
import org.ensembl.database.homo_sapiens_core.tables.PeptideArchive;
import org.ensembl.database.homo_sapiens_core.tables.PredictionExon;
import org.ensembl.database.homo_sapiens_core.tables.PredictionTranscript;
import org.ensembl.database.homo_sapiens_core.tables.ProteinAlignFeature;
import org.ensembl.database.homo_sapiens_core.tables.ProteinFeature;
import org.ensembl.database.homo_sapiens_core.tables.RepeatConsensus;
import org.ensembl.database.homo_sapiens_core.tables.RepeatFeature;
import org.ensembl.database.homo_sapiens_core.tables.SeqRegion;
import org.ensembl.database.homo_sapiens_core.tables.SeqRegionAttrib;
import org.ensembl.database.homo_sapiens_core.tables.SeqRegionSynonym;
import org.ensembl.database.homo_sapiens_core.tables.SimpleFeature;
import org.ensembl.database.homo_sapiens_core.tables.StableIdEvent;
import org.ensembl.database.homo_sapiens_core.tables.SupportingFeature;
import org.ensembl.database.homo_sapiens_core.tables.Transcript;
import org.ensembl.database.homo_sapiens_core.tables.TranscriptAttrib;
import org.ensembl.database.homo_sapiens_core.tables.TranscriptIntronSupportingEvidence;
import org.ensembl.database.homo_sapiens_core.tables.TranscriptSupportingFeature;
import org.ensembl.database.homo_sapiens_core.tables.Translation;
import org.ensembl.database.homo_sapiens_core.tables.TranslationAttrib;
import org.ensembl.database.homo_sapiens_core.tables.UnmappedObject;
import org.ensembl.database.homo_sapiens_core.tables.UnmappedReason;
import org.ensembl.database.homo_sapiens_core.tables.Xref;
import org.ensembl.database.homo_sapiens_core.tables.records.AltAlleleGroupRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.AltAlleleRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.AnalysisDescriptionRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.AnalysisRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.AssemblyExceptionRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.AssemblyRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.AssociatedGroupRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.AssociatedXrefRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.AttribTypeRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.CoordSystemRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DataFileRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DensityFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DensityTypeRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DependentXrefRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DitagFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DitagRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DnaAlignFeatureAttribRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DnaAlignFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.DnaRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.ExonRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.ExonTranscriptRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.ExternalDbRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.ExternalSynonymRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.GeneAttribRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.GeneRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.GenomeStatisticsRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.IdentityXrefRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.InterproRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.IntronSupportingEvidenceRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.KaryotypeRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MapRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MappingSessionRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MappingSetRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MarkerFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MarkerMapLocationRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MarkerRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MarkerSynonymRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MetaCoordRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MetaRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MiscAttribRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MiscFeatureMiscSetRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MiscFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.MiscSetRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.ObjectXrefRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.OntologyXrefRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.OperonRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.OperonTranscriptRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.PeptideArchiveRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.PredictionExonRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.PredictionTranscriptRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.ProteinAlignFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.ProteinFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.RepeatConsensusRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.RepeatFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.SeqRegionAttribRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.SeqRegionRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.SeqRegionSynonymRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.SimpleFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.StableIdEventRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.SupportingFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.TranscriptAttribRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.TranscriptIntronSupportingEvidenceRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.TranscriptRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.TranscriptSupportingFeatureRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.TranslationAttribRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.TranslationRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.UnmappedObjectRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.UnmappedReasonRecord;
import org.ensembl.database.homo_sapiens_core.tables.records.XrefRecord;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.jooq.types.UInteger;
import org.jooq.types.UShort;


/**
 * A class modelling foreign key relationships between tables of the <code>homo_sapiens_core_89_37</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AltAlleleRecord, UInteger> IDENTITY_ALT_ALLELE = Identities0.IDENTITY_ALT_ALLELE;
    public static final Identity<AltAlleleGroupRecord, UInteger> IDENTITY_ALT_ALLELE_GROUP = Identities0.IDENTITY_ALT_ALLELE_GROUP;
    public static final Identity<AnalysisRecord, UShort> IDENTITY_ANALYSIS = Identities0.IDENTITY_ANALYSIS;
    public static final Identity<AssemblyExceptionRecord, UInteger> IDENTITY_ASSEMBLY_EXCEPTION = Identities0.IDENTITY_ASSEMBLY_EXCEPTION;
    public static final Identity<AssociatedGroupRecord, UInteger> IDENTITY_ASSOCIATED_GROUP = Identities0.IDENTITY_ASSOCIATED_GROUP;
    public static final Identity<AssociatedXrefRecord, UInteger> IDENTITY_ASSOCIATED_XREF = Identities0.IDENTITY_ASSOCIATED_XREF;
    public static final Identity<AttribTypeRecord, UShort> IDENTITY_ATTRIB_TYPE = Identities0.IDENTITY_ATTRIB_TYPE;
    public static final Identity<CoordSystemRecord, UInteger> IDENTITY_COORD_SYSTEM = Identities0.IDENTITY_COORD_SYSTEM;
    public static final Identity<DataFileRecord, UInteger> IDENTITY_DATA_FILE = Identities0.IDENTITY_DATA_FILE;
    public static final Identity<DensityFeatureRecord, UInteger> IDENTITY_DENSITY_FEATURE = Identities0.IDENTITY_DENSITY_FEATURE;
    public static final Identity<DensityTypeRecord, UInteger> IDENTITY_DENSITY_TYPE = Identities0.IDENTITY_DENSITY_TYPE;
    public static final Identity<DitagRecord, UInteger> IDENTITY_DITAG = Identities0.IDENTITY_DITAG;
    public static final Identity<DitagFeatureRecord, UInteger> IDENTITY_DITAG_FEATURE = Identities0.IDENTITY_DITAG_FEATURE;
    public static final Identity<DnaAlignFeatureRecord, UInteger> IDENTITY_DNA_ALIGN_FEATURE = Identities0.IDENTITY_DNA_ALIGN_FEATURE;
    public static final Identity<ExonRecord, UInteger> IDENTITY_EXON = Identities0.IDENTITY_EXON;
    public static final Identity<ExternalDbRecord, UInteger> IDENTITY_EXTERNAL_DB = Identities0.IDENTITY_EXTERNAL_DB;
    public static final Identity<GeneRecord, UInteger> IDENTITY_GENE = Identities0.IDENTITY_GENE;
    public static final Identity<GenomeStatisticsRecord, UInteger> IDENTITY_GENOME_STATISTICS = Identities0.IDENTITY_GENOME_STATISTICS;
    public static final Identity<IntronSupportingEvidenceRecord, UInteger> IDENTITY_INTRON_SUPPORTING_EVIDENCE = Identities0.IDENTITY_INTRON_SUPPORTING_EVIDENCE;
    public static final Identity<KaryotypeRecord, UInteger> IDENTITY_KARYOTYPE = Identities0.IDENTITY_KARYOTYPE;
    public static final Identity<MapRecord, UInteger> IDENTITY_MAP = Identities0.IDENTITY_MAP;
    public static final Identity<MappingSessionRecord, UInteger> IDENTITY_MAPPING_SESSION = Identities0.IDENTITY_MAPPING_SESSION;
    public static final Identity<MarkerRecord, UInteger> IDENTITY_MARKER = Identities0.IDENTITY_MARKER;
    public static final Identity<MarkerFeatureRecord, UInteger> IDENTITY_MARKER_FEATURE = Identities0.IDENTITY_MARKER_FEATURE;
    public static final Identity<MarkerSynonymRecord, UInteger> IDENTITY_MARKER_SYNONYM = Identities0.IDENTITY_MARKER_SYNONYM;
    public static final Identity<MetaRecord, Integer> IDENTITY_META = Identities0.IDENTITY_META;
    public static final Identity<MiscFeatureRecord, UInteger> IDENTITY_MISC_FEATURE = Identities0.IDENTITY_MISC_FEATURE;
    public static final Identity<MiscSetRecord, UShort> IDENTITY_MISC_SET = Identities0.IDENTITY_MISC_SET;
    public static final Identity<ObjectXrefRecord, UInteger> IDENTITY_OBJECT_XREF = Identities0.IDENTITY_OBJECT_XREF;
    public static final Identity<OperonRecord, UInteger> IDENTITY_OPERON = Identities0.IDENTITY_OPERON;
    public static final Identity<OperonTranscriptRecord, UInteger> IDENTITY_OPERON_TRANSCRIPT = Identities0.IDENTITY_OPERON_TRANSCRIPT;
    public static final Identity<PeptideArchiveRecord, UInteger> IDENTITY_PEPTIDE_ARCHIVE = Identities0.IDENTITY_PEPTIDE_ARCHIVE;
    public static final Identity<PredictionExonRecord, UInteger> IDENTITY_PREDICTION_EXON = Identities0.IDENTITY_PREDICTION_EXON;
    public static final Identity<PredictionTranscriptRecord, UInteger> IDENTITY_PREDICTION_TRANSCRIPT = Identities0.IDENTITY_PREDICTION_TRANSCRIPT;
    public static final Identity<ProteinAlignFeatureRecord, UInteger> IDENTITY_PROTEIN_ALIGN_FEATURE = Identities0.IDENTITY_PROTEIN_ALIGN_FEATURE;
    public static final Identity<ProteinFeatureRecord, UInteger> IDENTITY_PROTEIN_FEATURE = Identities0.IDENTITY_PROTEIN_FEATURE;
    public static final Identity<RepeatConsensusRecord, UInteger> IDENTITY_REPEAT_CONSENSUS = Identities0.IDENTITY_REPEAT_CONSENSUS;
    public static final Identity<RepeatFeatureRecord, UInteger> IDENTITY_REPEAT_FEATURE = Identities0.IDENTITY_REPEAT_FEATURE;
    public static final Identity<SeqRegionRecord, UInteger> IDENTITY_SEQ_REGION = Identities0.IDENTITY_SEQ_REGION;
    public static final Identity<SeqRegionSynonymRecord, UInteger> IDENTITY_SEQ_REGION_SYNONYM = Identities0.IDENTITY_SEQ_REGION_SYNONYM;
    public static final Identity<SimpleFeatureRecord, UInteger> IDENTITY_SIMPLE_FEATURE = Identities0.IDENTITY_SIMPLE_FEATURE;
    public static final Identity<TranscriptRecord, UInteger> IDENTITY_TRANSCRIPT = Identities0.IDENTITY_TRANSCRIPT;
    public static final Identity<TranslationRecord, UInteger> IDENTITY_TRANSLATION = Identities0.IDENTITY_TRANSLATION;
    public static final Identity<UnmappedObjectRecord, UInteger> IDENTITY_UNMAPPED_OBJECT = Identities0.IDENTITY_UNMAPPED_OBJECT;
    public static final Identity<UnmappedReasonRecord, UInteger> IDENTITY_UNMAPPED_REASON = Identities0.IDENTITY_UNMAPPED_REASON;
    public static final Identity<XrefRecord, UInteger> IDENTITY_XREF = Identities0.IDENTITY_XREF;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AltAlleleRecord> KEY_ALT_ALLELE_PRIMARY = UniqueKeys0.KEY_ALT_ALLELE_PRIMARY;
    public static final UniqueKey<AltAlleleRecord> KEY_ALT_ALLELE_GENE_IDX = UniqueKeys0.KEY_ALT_ALLELE_GENE_IDX;
    public static final UniqueKey<AltAlleleGroupRecord> KEY_ALT_ALLELE_GROUP_PRIMARY = UniqueKeys0.KEY_ALT_ALLELE_GROUP_PRIMARY;
    public static final UniqueKey<AnalysisRecord> KEY_ANALYSIS_PRIMARY = UniqueKeys0.KEY_ANALYSIS_PRIMARY;
    public static final UniqueKey<AnalysisRecord> KEY_ANALYSIS_LOGIC_NAME_IDX = UniqueKeys0.KEY_ANALYSIS_LOGIC_NAME_IDX;
    public static final UniqueKey<AnalysisDescriptionRecord> KEY_ANALYSIS_DESCRIPTION_ANALYSIS_IDX = UniqueKeys0.KEY_ANALYSIS_DESCRIPTION_ANALYSIS_IDX;
    public static final UniqueKey<AssemblyRecord> KEY_ASSEMBLY_ALL_IDX = UniqueKeys0.KEY_ASSEMBLY_ALL_IDX;
    public static final UniqueKey<AssemblyExceptionRecord> KEY_ASSEMBLY_EXCEPTION_PRIMARY = UniqueKeys0.KEY_ASSEMBLY_EXCEPTION_PRIMARY;
    public static final UniqueKey<AssociatedGroupRecord> KEY_ASSOCIATED_GROUP_PRIMARY = UniqueKeys0.KEY_ASSOCIATED_GROUP_PRIMARY;
    public static final UniqueKey<AssociatedXrefRecord> KEY_ASSOCIATED_XREF_PRIMARY = UniqueKeys0.KEY_ASSOCIATED_XREF_PRIMARY;
    public static final UniqueKey<AssociatedXrefRecord> KEY_ASSOCIATED_XREF_OBJECT_ASSOCIATED_SOURCE_TYPE_IDX = UniqueKeys0.KEY_ASSOCIATED_XREF_OBJECT_ASSOCIATED_SOURCE_TYPE_IDX;
    public static final UniqueKey<AttribTypeRecord> KEY_ATTRIB_TYPE_PRIMARY = UniqueKeys0.KEY_ATTRIB_TYPE_PRIMARY;
    public static final UniqueKey<AttribTypeRecord> KEY_ATTRIB_TYPE_CODE_IDX = UniqueKeys0.KEY_ATTRIB_TYPE_CODE_IDX;
    public static final UniqueKey<CoordSystemRecord> KEY_COORD_SYSTEM_PRIMARY = UniqueKeys0.KEY_COORD_SYSTEM_PRIMARY;
    public static final UniqueKey<CoordSystemRecord> KEY_COORD_SYSTEM_NAME_IDX = UniqueKeys0.KEY_COORD_SYSTEM_NAME_IDX;
    public static final UniqueKey<CoordSystemRecord> KEY_COORD_SYSTEM_RANK_IDX = UniqueKeys0.KEY_COORD_SYSTEM_RANK_IDX;
    public static final UniqueKey<DataFileRecord> KEY_DATA_FILE_PRIMARY = UniqueKeys0.KEY_DATA_FILE_PRIMARY;
    public static final UniqueKey<DataFileRecord> KEY_DATA_FILE_DF_UNQ_IDX = UniqueKeys0.KEY_DATA_FILE_DF_UNQ_IDX;
    public static final UniqueKey<DensityFeatureRecord> KEY_DENSITY_FEATURE_PRIMARY = UniqueKeys0.KEY_DENSITY_FEATURE_PRIMARY;
    public static final UniqueKey<DensityTypeRecord> KEY_DENSITY_TYPE_PRIMARY = UniqueKeys0.KEY_DENSITY_TYPE_PRIMARY;
    public static final UniqueKey<DensityTypeRecord> KEY_DENSITY_TYPE_ANALYSIS_IDX = UniqueKeys0.KEY_DENSITY_TYPE_ANALYSIS_IDX;
    public static final UniqueKey<DependentXrefRecord> KEY_DEPENDENT_XREF_PRIMARY = UniqueKeys0.KEY_DEPENDENT_XREF_PRIMARY;
    public static final UniqueKey<DitagRecord> KEY_DITAG_PRIMARY = UniqueKeys0.KEY_DITAG_PRIMARY;
    public static final UniqueKey<DitagFeatureRecord> KEY_DITAG_FEATURE_PRIMARY = UniqueKeys0.KEY_DITAG_FEATURE_PRIMARY;
    public static final UniqueKey<DnaRecord> KEY_DNA_PRIMARY = UniqueKeys0.KEY_DNA_PRIMARY;
    public static final UniqueKey<DnaAlignFeatureRecord> KEY_DNA_ALIGN_FEATURE_PRIMARY = UniqueKeys0.KEY_DNA_ALIGN_FEATURE_PRIMARY;
    public static final UniqueKey<DnaAlignFeatureAttribRecord> KEY_DNA_ALIGN_FEATURE_ATTRIB_DNA_ALIGN_FEATURE_ATTRIBX = UniqueKeys0.KEY_DNA_ALIGN_FEATURE_ATTRIB_DNA_ALIGN_FEATURE_ATTRIBX;
    public static final UniqueKey<ExonRecord> KEY_EXON_PRIMARY = UniqueKeys0.KEY_EXON_PRIMARY;
    public static final UniqueKey<ExonTranscriptRecord> KEY_EXON_TRANSCRIPT_PRIMARY = UniqueKeys0.KEY_EXON_TRANSCRIPT_PRIMARY;
    public static final UniqueKey<ExternalDbRecord> KEY_EXTERNAL_DB_PRIMARY = UniqueKeys0.KEY_EXTERNAL_DB_PRIMARY;
    public static final UniqueKey<ExternalDbRecord> KEY_EXTERNAL_DB_DB_NAME_DB_RELEASE_IDX = UniqueKeys0.KEY_EXTERNAL_DB_DB_NAME_DB_RELEASE_IDX;
    public static final UniqueKey<ExternalSynonymRecord> KEY_EXTERNAL_SYNONYM_PRIMARY = UniqueKeys0.KEY_EXTERNAL_SYNONYM_PRIMARY;
    public static final UniqueKey<GeneRecord> KEY_GENE_PRIMARY = UniqueKeys0.KEY_GENE_PRIMARY;
    public static final UniqueKey<GeneAttribRecord> KEY_GENE_ATTRIB_GENE_ATTRIBX = UniqueKeys0.KEY_GENE_ATTRIB_GENE_ATTRIBX;
    public static final UniqueKey<GenomeStatisticsRecord> KEY_GENOME_STATISTICS_PRIMARY = UniqueKeys0.KEY_GENOME_STATISTICS_PRIMARY;
    public static final UniqueKey<GenomeStatisticsRecord> KEY_GENOME_STATISTICS_STATS_UNIQ = UniqueKeys0.KEY_GENOME_STATISTICS_STATS_UNIQ;
    public static final UniqueKey<IdentityXrefRecord> KEY_IDENTITY_XREF_PRIMARY = UniqueKeys0.KEY_IDENTITY_XREF_PRIMARY;
    public static final UniqueKey<InterproRecord> KEY_INTERPRO_ACCESSION_IDX = UniqueKeys0.KEY_INTERPRO_ACCESSION_IDX;
    public static final UniqueKey<IntronSupportingEvidenceRecord> KEY_INTRON_SUPPORTING_EVIDENCE_PRIMARY = UniqueKeys0.KEY_INTRON_SUPPORTING_EVIDENCE_PRIMARY;
    public static final UniqueKey<IntronSupportingEvidenceRecord> KEY_INTRON_SUPPORTING_EVIDENCE_ANALYSIS_ID = UniqueKeys0.KEY_INTRON_SUPPORTING_EVIDENCE_ANALYSIS_ID;
    public static final UniqueKey<KaryotypeRecord> KEY_KARYOTYPE_PRIMARY = UniqueKeys0.KEY_KARYOTYPE_PRIMARY;
    public static final UniqueKey<MapRecord> KEY_MAP_PRIMARY = UniqueKeys0.KEY_MAP_PRIMARY;
    public static final UniqueKey<MappingSessionRecord> KEY_MAPPING_SESSION_PRIMARY = UniqueKeys0.KEY_MAPPING_SESSION_PRIMARY;
    public static final UniqueKey<MappingSetRecord> KEY_MAPPING_SET_PRIMARY = UniqueKeys0.KEY_MAPPING_SET_PRIMARY;
    public static final UniqueKey<MappingSetRecord> KEY_MAPPING_SET_MAPPING_IDX = UniqueKeys0.KEY_MAPPING_SET_MAPPING_IDX;
    public static final UniqueKey<MarkerRecord> KEY_MARKER_PRIMARY = UniqueKeys0.KEY_MARKER_PRIMARY;
    public static final UniqueKey<MarkerFeatureRecord> KEY_MARKER_FEATURE_PRIMARY = UniqueKeys0.KEY_MARKER_FEATURE_PRIMARY;
    public static final UniqueKey<MarkerMapLocationRecord> KEY_MARKER_MAP_LOCATION_PRIMARY = UniqueKeys0.KEY_MARKER_MAP_LOCATION_PRIMARY;
    public static final UniqueKey<MarkerSynonymRecord> KEY_MARKER_SYNONYM_PRIMARY = UniqueKeys0.KEY_MARKER_SYNONYM_PRIMARY;
    public static final UniqueKey<MetaRecord> KEY_META_PRIMARY = UniqueKeys0.KEY_META_PRIMARY;
    public static final UniqueKey<MetaRecord> KEY_META_SPECIES_KEY_VALUE_IDX = UniqueKeys0.KEY_META_SPECIES_KEY_VALUE_IDX;
    public static final UniqueKey<MetaCoordRecord> KEY_META_COORD_CS_TABLE_NAME_IDX = UniqueKeys0.KEY_META_COORD_CS_TABLE_NAME_IDX;
    public static final UniqueKey<MiscAttribRecord> KEY_MISC_ATTRIB_MISC_ATTRIBX = UniqueKeys0.KEY_MISC_ATTRIB_MISC_ATTRIBX;
    public static final UniqueKey<MiscFeatureRecord> KEY_MISC_FEATURE_PRIMARY = UniqueKeys0.KEY_MISC_FEATURE_PRIMARY;
    public static final UniqueKey<MiscFeatureMiscSetRecord> KEY_MISC_FEATURE_MISC_SET_PRIMARY = UniqueKeys0.KEY_MISC_FEATURE_MISC_SET_PRIMARY;
    public static final UniqueKey<MiscSetRecord> KEY_MISC_SET_PRIMARY = UniqueKeys0.KEY_MISC_SET_PRIMARY;
    public static final UniqueKey<MiscSetRecord> KEY_MISC_SET_CODE_IDX = UniqueKeys0.KEY_MISC_SET_CODE_IDX;
    public static final UniqueKey<ObjectXrefRecord> KEY_OBJECT_XREF_PRIMARY = UniqueKeys0.KEY_OBJECT_XREF_PRIMARY;
    public static final UniqueKey<ObjectXrefRecord> KEY_OBJECT_XREF_XREF_IDX = UniqueKeys0.KEY_OBJECT_XREF_XREF_IDX;
    public static final UniqueKey<OntologyXrefRecord> KEY_ONTOLOGY_XREF_OBJECT_SOURCE_TYPE_IDX = UniqueKeys0.KEY_ONTOLOGY_XREF_OBJECT_SOURCE_TYPE_IDX;
    public static final UniqueKey<OperonRecord> KEY_OPERON_PRIMARY = UniqueKeys0.KEY_OPERON_PRIMARY;
    public static final UniqueKey<OperonTranscriptRecord> KEY_OPERON_TRANSCRIPT_PRIMARY = UniqueKeys0.KEY_OPERON_TRANSCRIPT_PRIMARY;
    public static final UniqueKey<PeptideArchiveRecord> KEY_PEPTIDE_ARCHIVE_PRIMARY = UniqueKeys0.KEY_PEPTIDE_ARCHIVE_PRIMARY;
    public static final UniqueKey<PredictionExonRecord> KEY_PREDICTION_EXON_PRIMARY = UniqueKeys0.KEY_PREDICTION_EXON_PRIMARY;
    public static final UniqueKey<PredictionTranscriptRecord> KEY_PREDICTION_TRANSCRIPT_PRIMARY = UniqueKeys0.KEY_PREDICTION_TRANSCRIPT_PRIMARY;
    public static final UniqueKey<ProteinAlignFeatureRecord> KEY_PROTEIN_ALIGN_FEATURE_PRIMARY = UniqueKeys0.KEY_PROTEIN_ALIGN_FEATURE_PRIMARY;
    public static final UniqueKey<ProteinFeatureRecord> KEY_PROTEIN_FEATURE_PRIMARY = UniqueKeys0.KEY_PROTEIN_FEATURE_PRIMARY;
    public static final UniqueKey<ProteinFeatureRecord> KEY_PROTEIN_FEATURE_ALN_IDX = UniqueKeys0.KEY_PROTEIN_FEATURE_ALN_IDX;
    public static final UniqueKey<RepeatConsensusRecord> KEY_REPEAT_CONSENSUS_PRIMARY = UniqueKeys0.KEY_REPEAT_CONSENSUS_PRIMARY;
    public static final UniqueKey<RepeatFeatureRecord> KEY_REPEAT_FEATURE_PRIMARY = UniqueKeys0.KEY_REPEAT_FEATURE_PRIMARY;
    public static final UniqueKey<SeqRegionRecord> KEY_SEQ_REGION_PRIMARY = UniqueKeys0.KEY_SEQ_REGION_PRIMARY;
    public static final UniqueKey<SeqRegionRecord> KEY_SEQ_REGION_NAME_CS_IDX = UniqueKeys0.KEY_SEQ_REGION_NAME_CS_IDX;
    public static final UniqueKey<SeqRegionAttribRecord> KEY_SEQ_REGION_ATTRIB_REGION_ATTRIBX = UniqueKeys0.KEY_SEQ_REGION_ATTRIB_REGION_ATTRIBX;
    public static final UniqueKey<SeqRegionSynonymRecord> KEY_SEQ_REGION_SYNONYM_PRIMARY = UniqueKeys0.KEY_SEQ_REGION_SYNONYM_PRIMARY;
    public static final UniqueKey<SeqRegionSynonymRecord> KEY_SEQ_REGION_SYNONYM_SYN_IDX = UniqueKeys0.KEY_SEQ_REGION_SYNONYM_SYN_IDX;
    public static final UniqueKey<SimpleFeatureRecord> KEY_SIMPLE_FEATURE_PRIMARY = UniqueKeys0.KEY_SIMPLE_FEATURE_PRIMARY;
    public static final UniqueKey<StableIdEventRecord> KEY_STABLE_ID_EVENT_UNI_IDX = UniqueKeys0.KEY_STABLE_ID_EVENT_UNI_IDX;
    public static final UniqueKey<SupportingFeatureRecord> KEY_SUPPORTING_FEATURE_ALL_IDX = UniqueKeys0.KEY_SUPPORTING_FEATURE_ALL_IDX;
    public static final UniqueKey<TranscriptRecord> KEY_TRANSCRIPT_PRIMARY = UniqueKeys0.KEY_TRANSCRIPT_PRIMARY;
    public static final UniqueKey<TranscriptRecord> KEY_TRANSCRIPT_CANONICAL_TRANSLATION_IDX = UniqueKeys0.KEY_TRANSCRIPT_CANONICAL_TRANSLATION_IDX;
    public static final UniqueKey<TranscriptAttribRecord> KEY_TRANSCRIPT_ATTRIB_TRANSCRIPT_ATTRIBX = UniqueKeys0.KEY_TRANSCRIPT_ATTRIB_TRANSCRIPT_ATTRIBX;
    public static final UniqueKey<TranscriptIntronSupportingEvidenceRecord> KEY_TRANSCRIPT_INTRON_SUPPORTING_EVIDENCE_PRIMARY = UniqueKeys0.KEY_TRANSCRIPT_INTRON_SUPPORTING_EVIDENCE_PRIMARY;
    public static final UniqueKey<TranscriptSupportingFeatureRecord> KEY_TRANSCRIPT_SUPPORTING_FEATURE_ALL_IDX = UniqueKeys0.KEY_TRANSCRIPT_SUPPORTING_FEATURE_ALL_IDX;
    public static final UniqueKey<TranslationRecord> KEY_TRANSLATION_PRIMARY = UniqueKeys0.KEY_TRANSLATION_PRIMARY;
    public static final UniqueKey<TranslationAttribRecord> KEY_TRANSLATION_ATTRIB_TRANSLATION_ATTRIBX = UniqueKeys0.KEY_TRANSLATION_ATTRIB_TRANSLATION_ATTRIBX;
    public static final UniqueKey<UnmappedObjectRecord> KEY_UNMAPPED_OBJECT_PRIMARY = UniqueKeys0.KEY_UNMAPPED_OBJECT_PRIMARY;
    public static final UniqueKey<UnmappedObjectRecord> KEY_UNMAPPED_OBJECT_UNIQUE_UNMAPPED_OBJ_IDX = UniqueKeys0.KEY_UNMAPPED_OBJECT_UNIQUE_UNMAPPED_OBJ_IDX;
    public static final UniqueKey<UnmappedReasonRecord> KEY_UNMAPPED_REASON_PRIMARY = UniqueKeys0.KEY_UNMAPPED_REASON_PRIMARY;
    public static final UniqueKey<XrefRecord> KEY_XREF_PRIMARY = UniqueKeys0.KEY_XREF_PRIMARY;
    public static final UniqueKey<XrefRecord> KEY_XREF_ID_INDEX = UniqueKeys0.KEY_XREF_ID_INDEX;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<AltAlleleRecord, UInteger> IDENTITY_ALT_ALLELE = createIdentity(AltAllele.ALT_ALLELE, AltAllele.ALT_ALLELE.ALT_ALLELE_ID);
        public static Identity<AltAlleleGroupRecord, UInteger> IDENTITY_ALT_ALLELE_GROUP = createIdentity(AltAlleleGroup.ALT_ALLELE_GROUP, AltAlleleGroup.ALT_ALLELE_GROUP.ALT_ALLELE_GROUP_ID);
        public static Identity<AnalysisRecord, UShort> IDENTITY_ANALYSIS = createIdentity(Analysis.ANALYSIS, Analysis.ANALYSIS.ANALYSIS_ID);
        public static Identity<AssemblyExceptionRecord, UInteger> IDENTITY_ASSEMBLY_EXCEPTION = createIdentity(AssemblyException.ASSEMBLY_EXCEPTION, AssemblyException.ASSEMBLY_EXCEPTION.ASSEMBLY_EXCEPTION_ID);
        public static Identity<AssociatedGroupRecord, UInteger> IDENTITY_ASSOCIATED_GROUP = createIdentity(AssociatedGroup.ASSOCIATED_GROUP, AssociatedGroup.ASSOCIATED_GROUP.ASSOCIATED_GROUP_ID);
        public static Identity<AssociatedXrefRecord, UInteger> IDENTITY_ASSOCIATED_XREF = createIdentity(AssociatedXref.ASSOCIATED_XREF, AssociatedXref.ASSOCIATED_XREF.ASSOCIATED_XREF_ID);
        public static Identity<AttribTypeRecord, UShort> IDENTITY_ATTRIB_TYPE = createIdentity(AttribType.ATTRIB_TYPE, AttribType.ATTRIB_TYPE.ATTRIB_TYPE_ID);
        public static Identity<CoordSystemRecord, UInteger> IDENTITY_COORD_SYSTEM = createIdentity(CoordSystem.COORD_SYSTEM, CoordSystem.COORD_SYSTEM.COORD_SYSTEM_ID);
        public static Identity<DataFileRecord, UInteger> IDENTITY_DATA_FILE = createIdentity(DataFile.DATA_FILE, DataFile.DATA_FILE.DATA_FILE_ID);
        public static Identity<DensityFeatureRecord, UInteger> IDENTITY_DENSITY_FEATURE = createIdentity(DensityFeature.DENSITY_FEATURE, DensityFeature.DENSITY_FEATURE.DENSITY_FEATURE_ID);
        public static Identity<DensityTypeRecord, UInteger> IDENTITY_DENSITY_TYPE = createIdentity(DensityType.DENSITY_TYPE, DensityType.DENSITY_TYPE.DENSITY_TYPE_ID);
        public static Identity<DitagRecord, UInteger> IDENTITY_DITAG = createIdentity(Ditag.DITAG, Ditag.DITAG.DITAG_ID);
        public static Identity<DitagFeatureRecord, UInteger> IDENTITY_DITAG_FEATURE = createIdentity(DitagFeature.DITAG_FEATURE, DitagFeature.DITAG_FEATURE.DITAG_FEATURE_ID);
        public static Identity<DnaAlignFeatureRecord, UInteger> IDENTITY_DNA_ALIGN_FEATURE = createIdentity(DnaAlignFeature.DNA_ALIGN_FEATURE, DnaAlignFeature.DNA_ALIGN_FEATURE.DNA_ALIGN_FEATURE_ID);
        public static Identity<ExonRecord, UInteger> IDENTITY_EXON = createIdentity(Exon.EXON, Exon.EXON.EXON_ID);
        public static Identity<ExternalDbRecord, UInteger> IDENTITY_EXTERNAL_DB = createIdentity(ExternalDb.EXTERNAL_DB, ExternalDb.EXTERNAL_DB.EXTERNAL_DB_ID);
        public static Identity<GeneRecord, UInteger> IDENTITY_GENE = createIdentity(Gene.GENE, Gene.GENE.GENE_ID);
        public static Identity<GenomeStatisticsRecord, UInteger> IDENTITY_GENOME_STATISTICS = createIdentity(GenomeStatistics.GENOME_STATISTICS, GenomeStatistics.GENOME_STATISTICS.GENOME_STATISTICS_ID);
        public static Identity<IntronSupportingEvidenceRecord, UInteger> IDENTITY_INTRON_SUPPORTING_EVIDENCE = createIdentity(IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE, IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE.INTRON_SUPPORTING_EVIDENCE_ID);
        public static Identity<KaryotypeRecord, UInteger> IDENTITY_KARYOTYPE = createIdentity(Karyotype.KARYOTYPE, Karyotype.KARYOTYPE.KARYOTYPE_ID);
        public static Identity<MapRecord, UInteger> IDENTITY_MAP = createIdentity(Map.MAP, Map.MAP.MAP_ID);
        public static Identity<MappingSessionRecord, UInteger> IDENTITY_MAPPING_SESSION = createIdentity(MappingSession.MAPPING_SESSION, MappingSession.MAPPING_SESSION.MAPPING_SESSION_ID);
        public static Identity<MarkerRecord, UInteger> IDENTITY_MARKER = createIdentity(Marker.MARKER, Marker.MARKER.MARKER_ID);
        public static Identity<MarkerFeatureRecord, UInteger> IDENTITY_MARKER_FEATURE = createIdentity(MarkerFeature.MARKER_FEATURE, MarkerFeature.MARKER_FEATURE.MARKER_FEATURE_ID);
        public static Identity<MarkerSynonymRecord, UInteger> IDENTITY_MARKER_SYNONYM = createIdentity(MarkerSynonym.MARKER_SYNONYM, MarkerSynonym.MARKER_SYNONYM.MARKER_SYNONYM_ID);
        public static Identity<MetaRecord, Integer> IDENTITY_META = createIdentity(Meta.META, Meta.META.META_ID);
        public static Identity<MiscFeatureRecord, UInteger> IDENTITY_MISC_FEATURE = createIdentity(MiscFeature.MISC_FEATURE, MiscFeature.MISC_FEATURE.MISC_FEATURE_ID);
        public static Identity<MiscSetRecord, UShort> IDENTITY_MISC_SET = createIdentity(MiscSet.MISC_SET, MiscSet.MISC_SET.MISC_SET_ID);
        public static Identity<ObjectXrefRecord, UInteger> IDENTITY_OBJECT_XREF = createIdentity(ObjectXref.OBJECT_XREF, ObjectXref.OBJECT_XREF.OBJECT_XREF_ID);
        public static Identity<OperonRecord, UInteger> IDENTITY_OPERON = createIdentity(Operon.OPERON, Operon.OPERON.OPERON_ID);
        public static Identity<OperonTranscriptRecord, UInteger> IDENTITY_OPERON_TRANSCRIPT = createIdentity(OperonTranscript.OPERON_TRANSCRIPT, OperonTranscript.OPERON_TRANSCRIPT.OPERON_TRANSCRIPT_ID);
        public static Identity<PeptideArchiveRecord, UInteger> IDENTITY_PEPTIDE_ARCHIVE = createIdentity(PeptideArchive.PEPTIDE_ARCHIVE, PeptideArchive.PEPTIDE_ARCHIVE.PEPTIDE_ARCHIVE_ID);
        public static Identity<PredictionExonRecord, UInteger> IDENTITY_PREDICTION_EXON = createIdentity(PredictionExon.PREDICTION_EXON, PredictionExon.PREDICTION_EXON.PREDICTION_EXON_ID);
        public static Identity<PredictionTranscriptRecord, UInteger> IDENTITY_PREDICTION_TRANSCRIPT = createIdentity(PredictionTranscript.PREDICTION_TRANSCRIPT, PredictionTranscript.PREDICTION_TRANSCRIPT.PREDICTION_TRANSCRIPT_ID);
        public static Identity<ProteinAlignFeatureRecord, UInteger> IDENTITY_PROTEIN_ALIGN_FEATURE = createIdentity(ProteinAlignFeature.PROTEIN_ALIGN_FEATURE, ProteinAlignFeature.PROTEIN_ALIGN_FEATURE.PROTEIN_ALIGN_FEATURE_ID);
        public static Identity<ProteinFeatureRecord, UInteger> IDENTITY_PROTEIN_FEATURE = createIdentity(ProteinFeature.PROTEIN_FEATURE, ProteinFeature.PROTEIN_FEATURE.PROTEIN_FEATURE_ID);
        public static Identity<RepeatConsensusRecord, UInteger> IDENTITY_REPEAT_CONSENSUS = createIdentity(RepeatConsensus.REPEAT_CONSENSUS, RepeatConsensus.REPEAT_CONSENSUS.REPEAT_CONSENSUS_ID);
        public static Identity<RepeatFeatureRecord, UInteger> IDENTITY_REPEAT_FEATURE = createIdentity(RepeatFeature.REPEAT_FEATURE, RepeatFeature.REPEAT_FEATURE.REPEAT_FEATURE_ID);
        public static Identity<SeqRegionRecord, UInteger> IDENTITY_SEQ_REGION = createIdentity(SeqRegion.SEQ_REGION, SeqRegion.SEQ_REGION.SEQ_REGION_ID);
        public static Identity<SeqRegionSynonymRecord, UInteger> IDENTITY_SEQ_REGION_SYNONYM = createIdentity(SeqRegionSynonym.SEQ_REGION_SYNONYM, SeqRegionSynonym.SEQ_REGION_SYNONYM.SEQ_REGION_SYNONYM_ID);
        public static Identity<SimpleFeatureRecord, UInteger> IDENTITY_SIMPLE_FEATURE = createIdentity(SimpleFeature.SIMPLE_FEATURE, SimpleFeature.SIMPLE_FEATURE.SIMPLE_FEATURE_ID);
        public static Identity<TranscriptRecord, UInteger> IDENTITY_TRANSCRIPT = createIdentity(Transcript.TRANSCRIPT, Transcript.TRANSCRIPT.TRANSCRIPT_ID);
        public static Identity<TranslationRecord, UInteger> IDENTITY_TRANSLATION = createIdentity(Translation.TRANSLATION, Translation.TRANSLATION.TRANSLATION_ID);
        public static Identity<UnmappedObjectRecord, UInteger> IDENTITY_UNMAPPED_OBJECT = createIdentity(UnmappedObject.UNMAPPED_OBJECT, UnmappedObject.UNMAPPED_OBJECT.UNMAPPED_OBJECT_ID);
        public static Identity<UnmappedReasonRecord, UInteger> IDENTITY_UNMAPPED_REASON = createIdentity(UnmappedReason.UNMAPPED_REASON, UnmappedReason.UNMAPPED_REASON.UNMAPPED_REASON_ID);
        public static Identity<XrefRecord, UInteger> IDENTITY_XREF = createIdentity(Xref.XREF, Xref.XREF.XREF_ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<AltAlleleRecord> KEY_ALT_ALLELE_PRIMARY = createUniqueKey(AltAllele.ALT_ALLELE, "KEY_alt_allele_PRIMARY", AltAllele.ALT_ALLELE.ALT_ALLELE_ID);
        public static final UniqueKey<AltAlleleRecord> KEY_ALT_ALLELE_GENE_IDX = createUniqueKey(AltAllele.ALT_ALLELE, "KEY_alt_allele_gene_idx", AltAllele.ALT_ALLELE.GENE_ID);
        public static final UniqueKey<AltAlleleGroupRecord> KEY_ALT_ALLELE_GROUP_PRIMARY = createUniqueKey(AltAlleleGroup.ALT_ALLELE_GROUP, "KEY_alt_allele_group_PRIMARY", AltAlleleGroup.ALT_ALLELE_GROUP.ALT_ALLELE_GROUP_ID);
        public static final UniqueKey<AnalysisRecord> KEY_ANALYSIS_PRIMARY = createUniqueKey(Analysis.ANALYSIS, "KEY_analysis_PRIMARY", Analysis.ANALYSIS.ANALYSIS_ID);
        public static final UniqueKey<AnalysisRecord> KEY_ANALYSIS_LOGIC_NAME_IDX = createUniqueKey(Analysis.ANALYSIS, "KEY_analysis_logic_name_idx", Analysis.ANALYSIS.LOGIC_NAME);
        public static final UniqueKey<AnalysisDescriptionRecord> KEY_ANALYSIS_DESCRIPTION_ANALYSIS_IDX = createUniqueKey(AnalysisDescription.ANALYSIS_DESCRIPTION, "KEY_analysis_description_analysis_idx", AnalysisDescription.ANALYSIS_DESCRIPTION.ANALYSIS_ID);
        public static final UniqueKey<AssemblyRecord> KEY_ASSEMBLY_ALL_IDX = createUniqueKey(Assembly.ASSEMBLY, "KEY_assembly_all_idx", Assembly.ASSEMBLY.ASM_SEQ_REGION_ID, Assembly.ASSEMBLY.CMP_SEQ_REGION_ID, Assembly.ASSEMBLY.ASM_START, Assembly.ASSEMBLY.ASM_END, Assembly.ASSEMBLY.CMP_START, Assembly.ASSEMBLY.CMP_END, Assembly.ASSEMBLY.ORI);
        public static final UniqueKey<AssemblyExceptionRecord> KEY_ASSEMBLY_EXCEPTION_PRIMARY = createUniqueKey(AssemblyException.ASSEMBLY_EXCEPTION, "KEY_assembly_exception_PRIMARY", AssemblyException.ASSEMBLY_EXCEPTION.ASSEMBLY_EXCEPTION_ID);
        public static final UniqueKey<AssociatedGroupRecord> KEY_ASSOCIATED_GROUP_PRIMARY = createUniqueKey(AssociatedGroup.ASSOCIATED_GROUP, "KEY_associated_group_PRIMARY", AssociatedGroup.ASSOCIATED_GROUP.ASSOCIATED_GROUP_ID);
        public static final UniqueKey<AssociatedXrefRecord> KEY_ASSOCIATED_XREF_PRIMARY = createUniqueKey(AssociatedXref.ASSOCIATED_XREF, "KEY_associated_xref_PRIMARY", AssociatedXref.ASSOCIATED_XREF.ASSOCIATED_XREF_ID);
        public static final UniqueKey<AssociatedXrefRecord> KEY_ASSOCIATED_XREF_OBJECT_ASSOCIATED_SOURCE_TYPE_IDX = createUniqueKey(AssociatedXref.ASSOCIATED_XREF, "KEY_associated_xref_object_associated_source_type_idx", AssociatedXref.ASSOCIATED_XREF.OBJECT_XREF_ID, AssociatedXref.ASSOCIATED_XREF.XREF_ID, AssociatedXref.ASSOCIATED_XREF.SOURCE_XREF_ID, AssociatedXref.ASSOCIATED_XREF.CONDITION_TYPE, AssociatedXref.ASSOCIATED_XREF.ASSOCIATED_GROUP_ID);
        public static final UniqueKey<AttribTypeRecord> KEY_ATTRIB_TYPE_PRIMARY = createUniqueKey(AttribType.ATTRIB_TYPE, "KEY_attrib_type_PRIMARY", AttribType.ATTRIB_TYPE.ATTRIB_TYPE_ID);
        public static final UniqueKey<AttribTypeRecord> KEY_ATTRIB_TYPE_CODE_IDX = createUniqueKey(AttribType.ATTRIB_TYPE, "KEY_attrib_type_code_idx", AttribType.ATTRIB_TYPE.CODE);
        public static final UniqueKey<CoordSystemRecord> KEY_COORD_SYSTEM_PRIMARY = createUniqueKey(CoordSystem.COORD_SYSTEM, "KEY_coord_system_PRIMARY", CoordSystem.COORD_SYSTEM.COORD_SYSTEM_ID);
        public static final UniqueKey<CoordSystemRecord> KEY_COORD_SYSTEM_NAME_IDX = createUniqueKey(CoordSystem.COORD_SYSTEM, "KEY_coord_system_name_idx", CoordSystem.COORD_SYSTEM.NAME, CoordSystem.COORD_SYSTEM.VERSION, CoordSystem.COORD_SYSTEM.SPECIES_ID);
        public static final UniqueKey<CoordSystemRecord> KEY_COORD_SYSTEM_RANK_IDX = createUniqueKey(CoordSystem.COORD_SYSTEM, "KEY_coord_system_rank_idx", CoordSystem.COORD_SYSTEM.RANK, CoordSystem.COORD_SYSTEM.SPECIES_ID);
        public static final UniqueKey<DataFileRecord> KEY_DATA_FILE_PRIMARY = createUniqueKey(DataFile.DATA_FILE, "KEY_data_file_PRIMARY", DataFile.DATA_FILE.DATA_FILE_ID);
        public static final UniqueKey<DataFileRecord> KEY_DATA_FILE_DF_UNQ_IDX = createUniqueKey(DataFile.DATA_FILE, "KEY_data_file_df_unq_idx", DataFile.DATA_FILE.COORD_SYSTEM_ID, DataFile.DATA_FILE.ANALYSIS_ID, DataFile.DATA_FILE.NAME, DataFile.DATA_FILE.FILE_TYPE);
        public static final UniqueKey<DensityFeatureRecord> KEY_DENSITY_FEATURE_PRIMARY = createUniqueKey(DensityFeature.DENSITY_FEATURE, "KEY_density_feature_PRIMARY", DensityFeature.DENSITY_FEATURE.DENSITY_FEATURE_ID);
        public static final UniqueKey<DensityTypeRecord> KEY_DENSITY_TYPE_PRIMARY = createUniqueKey(DensityType.DENSITY_TYPE, "KEY_density_type_PRIMARY", DensityType.DENSITY_TYPE.DENSITY_TYPE_ID);
        public static final UniqueKey<DensityTypeRecord> KEY_DENSITY_TYPE_ANALYSIS_IDX = createUniqueKey(DensityType.DENSITY_TYPE, "KEY_density_type_analysis_idx", DensityType.DENSITY_TYPE.ANALYSIS_ID, DensityType.DENSITY_TYPE.BLOCK_SIZE, DensityType.DENSITY_TYPE.REGION_FEATURES);
        public static final UniqueKey<DependentXrefRecord> KEY_DEPENDENT_XREF_PRIMARY = createUniqueKey(DependentXref.DEPENDENT_XREF, "KEY_dependent_xref_PRIMARY", DependentXref.DEPENDENT_XREF.OBJECT_XREF_ID);
        public static final UniqueKey<DitagRecord> KEY_DITAG_PRIMARY = createUniqueKey(Ditag.DITAG, "KEY_ditag_PRIMARY", Ditag.DITAG.DITAG_ID);
        public static final UniqueKey<DitagFeatureRecord> KEY_DITAG_FEATURE_PRIMARY = createUniqueKey(DitagFeature.DITAG_FEATURE, "KEY_ditag_feature_PRIMARY", DitagFeature.DITAG_FEATURE.DITAG_FEATURE_ID);
        public static final UniqueKey<DnaRecord> KEY_DNA_PRIMARY = createUniqueKey(Dna.DNA, "KEY_dna_PRIMARY", Dna.DNA.SEQ_REGION_ID);
        public static final UniqueKey<DnaAlignFeatureRecord> KEY_DNA_ALIGN_FEATURE_PRIMARY = createUniqueKey(DnaAlignFeature.DNA_ALIGN_FEATURE, "KEY_dna_align_feature_PRIMARY", DnaAlignFeature.DNA_ALIGN_FEATURE.DNA_ALIGN_FEATURE_ID);
        public static final UniqueKey<DnaAlignFeatureAttribRecord> KEY_DNA_ALIGN_FEATURE_ATTRIB_DNA_ALIGN_FEATURE_ATTRIBX = createUniqueKey(DnaAlignFeatureAttrib.DNA_ALIGN_FEATURE_ATTRIB, "KEY_dna_align_feature_attrib_dna_align_feature_attribx", DnaAlignFeatureAttrib.DNA_ALIGN_FEATURE_ATTRIB.DNA_ALIGN_FEATURE_ID, DnaAlignFeatureAttrib.DNA_ALIGN_FEATURE_ATTRIB.ATTRIB_TYPE_ID, DnaAlignFeatureAttrib.DNA_ALIGN_FEATURE_ATTRIB.VALUE);
        public static final UniqueKey<ExonRecord> KEY_EXON_PRIMARY = createUniqueKey(Exon.EXON, "KEY_exon_PRIMARY", Exon.EXON.EXON_ID);
        public static final UniqueKey<ExonTranscriptRecord> KEY_EXON_TRANSCRIPT_PRIMARY = createUniqueKey(ExonTranscript.EXON_TRANSCRIPT, "KEY_exon_transcript_PRIMARY", ExonTranscript.EXON_TRANSCRIPT.EXON_ID, ExonTranscript.EXON_TRANSCRIPT.TRANSCRIPT_ID, ExonTranscript.EXON_TRANSCRIPT.RANK);
        public static final UniqueKey<ExternalDbRecord> KEY_EXTERNAL_DB_PRIMARY = createUniqueKey(ExternalDb.EXTERNAL_DB, "KEY_external_db_PRIMARY", ExternalDb.EXTERNAL_DB.EXTERNAL_DB_ID);
        public static final UniqueKey<ExternalDbRecord> KEY_EXTERNAL_DB_DB_NAME_DB_RELEASE_IDX = createUniqueKey(ExternalDb.EXTERNAL_DB, "KEY_external_db_db_name_db_release_idx", ExternalDb.EXTERNAL_DB.DB_NAME, ExternalDb.EXTERNAL_DB.DB_RELEASE);
        public static final UniqueKey<ExternalSynonymRecord> KEY_EXTERNAL_SYNONYM_PRIMARY = createUniqueKey(ExternalSynonym.EXTERNAL_SYNONYM, "KEY_external_synonym_PRIMARY", ExternalSynonym.EXTERNAL_SYNONYM.XREF_ID, ExternalSynonym.EXTERNAL_SYNONYM.SYNONYM);
        public static final UniqueKey<GeneRecord> KEY_GENE_PRIMARY = createUniqueKey(Gene.GENE, "KEY_gene_PRIMARY", Gene.GENE.GENE_ID);
        public static final UniqueKey<GeneAttribRecord> KEY_GENE_ATTRIB_GENE_ATTRIBX = createUniqueKey(GeneAttrib.GENE_ATTRIB, "KEY_gene_attrib_gene_attribx", GeneAttrib.GENE_ATTRIB.GENE_ID, GeneAttrib.GENE_ATTRIB.ATTRIB_TYPE_ID, GeneAttrib.GENE_ATTRIB.VALUE);
        public static final UniqueKey<GenomeStatisticsRecord> KEY_GENOME_STATISTICS_PRIMARY = createUniqueKey(GenomeStatistics.GENOME_STATISTICS, "KEY_genome_statistics_PRIMARY", GenomeStatistics.GENOME_STATISTICS.GENOME_STATISTICS_ID);
        public static final UniqueKey<GenomeStatisticsRecord> KEY_GENOME_STATISTICS_STATS_UNIQ = createUniqueKey(GenomeStatistics.GENOME_STATISTICS, "KEY_genome_statistics_stats_uniq", GenomeStatistics.GENOME_STATISTICS.STATISTIC, GenomeStatistics.GENOME_STATISTICS.ATTRIB_TYPE_ID, GenomeStatistics.GENOME_STATISTICS.SPECIES_ID);
        public static final UniqueKey<IdentityXrefRecord> KEY_IDENTITY_XREF_PRIMARY = createUniqueKey(IdentityXref.IDENTITY_XREF, "KEY_identity_xref_PRIMARY", IdentityXref.IDENTITY_XREF.OBJECT_XREF_ID);
        public static final UniqueKey<InterproRecord> KEY_INTERPRO_ACCESSION_IDX = createUniqueKey(Interpro.INTERPRO, "KEY_interpro_accession_idx", Interpro.INTERPRO.INTERPRO_AC, Interpro.INTERPRO.ID);
        public static final UniqueKey<IntronSupportingEvidenceRecord> KEY_INTRON_SUPPORTING_EVIDENCE_PRIMARY = createUniqueKey(IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE, "KEY_intron_supporting_evidence_PRIMARY", IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE.INTRON_SUPPORTING_EVIDENCE_ID);
        public static final UniqueKey<IntronSupportingEvidenceRecord> KEY_INTRON_SUPPORTING_EVIDENCE_ANALYSIS_ID = createUniqueKey(IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE, "KEY_intron_supporting_evidence_analysis_id", IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE.ANALYSIS_ID, IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE.SEQ_REGION_ID, IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE.SEQ_REGION_START, IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE.SEQ_REGION_END, IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE.SEQ_REGION_STRAND, IntronSupportingEvidence.INTRON_SUPPORTING_EVIDENCE.HIT_NAME);
        public static final UniqueKey<KaryotypeRecord> KEY_KARYOTYPE_PRIMARY = createUniqueKey(Karyotype.KARYOTYPE, "KEY_karyotype_PRIMARY", Karyotype.KARYOTYPE.KARYOTYPE_ID);
        public static final UniqueKey<MapRecord> KEY_MAP_PRIMARY = createUniqueKey(Map.MAP, "KEY_map_PRIMARY", Map.MAP.MAP_ID);
        public static final UniqueKey<MappingSessionRecord> KEY_MAPPING_SESSION_PRIMARY = createUniqueKey(MappingSession.MAPPING_SESSION, "KEY_mapping_session_PRIMARY", MappingSession.MAPPING_SESSION.MAPPING_SESSION_ID);
        public static final UniqueKey<MappingSetRecord> KEY_MAPPING_SET_PRIMARY = createUniqueKey(MappingSet.MAPPING_SET, "KEY_mapping_set_PRIMARY", MappingSet.MAPPING_SET.MAPPING_SET_ID);
        public static final UniqueKey<MappingSetRecord> KEY_MAPPING_SET_MAPPING_IDX = createUniqueKey(MappingSet.MAPPING_SET, "KEY_mapping_set_mapping_idx", MappingSet.MAPPING_SET.INTERNAL_SCHEMA_BUILD, MappingSet.MAPPING_SET.EXTERNAL_SCHEMA_BUILD);
        public static final UniqueKey<MarkerRecord> KEY_MARKER_PRIMARY = createUniqueKey(Marker.MARKER, "KEY_marker_PRIMARY", Marker.MARKER.MARKER_ID);
        public static final UniqueKey<MarkerFeatureRecord> KEY_MARKER_FEATURE_PRIMARY = createUniqueKey(MarkerFeature.MARKER_FEATURE, "KEY_marker_feature_PRIMARY", MarkerFeature.MARKER_FEATURE.MARKER_FEATURE_ID);
        public static final UniqueKey<MarkerMapLocationRecord> KEY_MARKER_MAP_LOCATION_PRIMARY = createUniqueKey(MarkerMapLocation.MARKER_MAP_LOCATION, "KEY_marker_map_location_PRIMARY", MarkerMapLocation.MARKER_MAP_LOCATION.MARKER_ID, MarkerMapLocation.MARKER_MAP_LOCATION.MAP_ID);
        public static final UniqueKey<MarkerSynonymRecord> KEY_MARKER_SYNONYM_PRIMARY = createUniqueKey(MarkerSynonym.MARKER_SYNONYM, "KEY_marker_synonym_PRIMARY", MarkerSynonym.MARKER_SYNONYM.MARKER_SYNONYM_ID);
        public static final UniqueKey<MetaRecord> KEY_META_PRIMARY = createUniqueKey(Meta.META, "KEY_meta_PRIMARY", Meta.META.META_ID);
        public static final UniqueKey<MetaRecord> KEY_META_SPECIES_KEY_VALUE_IDX = createUniqueKey(Meta.META, "KEY_meta_species_key_value_idx", Meta.META.SPECIES_ID, Meta.META.META_KEY, Meta.META.META_VALUE);
        public static final UniqueKey<MetaCoordRecord> KEY_META_COORD_CS_TABLE_NAME_IDX = createUniqueKey(MetaCoord.META_COORD, "KEY_meta_coord_cs_table_name_idx", MetaCoord.META_COORD.COORD_SYSTEM_ID, MetaCoord.META_COORD.TABLE_NAME);
        public static final UniqueKey<MiscAttribRecord> KEY_MISC_ATTRIB_MISC_ATTRIBX = createUniqueKey(MiscAttrib.MISC_ATTRIB, "KEY_misc_attrib_misc_attribx", MiscAttrib.MISC_ATTRIB.MISC_FEATURE_ID, MiscAttrib.MISC_ATTRIB.ATTRIB_TYPE_ID, MiscAttrib.MISC_ATTRIB.VALUE);
        public static final UniqueKey<MiscFeatureRecord> KEY_MISC_FEATURE_PRIMARY = createUniqueKey(MiscFeature.MISC_FEATURE, "KEY_misc_feature_PRIMARY", MiscFeature.MISC_FEATURE.MISC_FEATURE_ID);
        public static final UniqueKey<MiscFeatureMiscSetRecord> KEY_MISC_FEATURE_MISC_SET_PRIMARY = createUniqueKey(MiscFeatureMiscSet.MISC_FEATURE_MISC_SET, "KEY_misc_feature_misc_set_PRIMARY", MiscFeatureMiscSet.MISC_FEATURE_MISC_SET.MISC_FEATURE_ID, MiscFeatureMiscSet.MISC_FEATURE_MISC_SET.MISC_SET_ID);
        public static final UniqueKey<MiscSetRecord> KEY_MISC_SET_PRIMARY = createUniqueKey(MiscSet.MISC_SET, "KEY_misc_set_PRIMARY", MiscSet.MISC_SET.MISC_SET_ID);
        public static final UniqueKey<MiscSetRecord> KEY_MISC_SET_CODE_IDX = createUniqueKey(MiscSet.MISC_SET, "KEY_misc_set_code_idx", MiscSet.MISC_SET.CODE);
        public static final UniqueKey<ObjectXrefRecord> KEY_OBJECT_XREF_PRIMARY = createUniqueKey(ObjectXref.OBJECT_XREF, "KEY_object_xref_PRIMARY", ObjectXref.OBJECT_XREF.OBJECT_XREF_ID);
        public static final UniqueKey<ObjectXrefRecord> KEY_OBJECT_XREF_XREF_IDX = createUniqueKey(ObjectXref.OBJECT_XREF, "KEY_object_xref_xref_idx", ObjectXref.OBJECT_XREF.XREF_ID, ObjectXref.OBJECT_XREF.ENSEMBL_OBJECT_TYPE, ObjectXref.OBJECT_XREF.ENSEMBL_ID, ObjectXref.OBJECT_XREF.ANALYSIS_ID);
        public static final UniqueKey<OntologyXrefRecord> KEY_ONTOLOGY_XREF_OBJECT_SOURCE_TYPE_IDX = createUniqueKey(OntologyXref.ONTOLOGY_XREF, "KEY_ontology_xref_object_source_type_idx", OntologyXref.ONTOLOGY_XREF.OBJECT_XREF_ID, OntologyXref.ONTOLOGY_XREF.SOURCE_XREF_ID, OntologyXref.ONTOLOGY_XREF.LINKAGE_TYPE);
        public static final UniqueKey<OperonRecord> KEY_OPERON_PRIMARY = createUniqueKey(Operon.OPERON, "KEY_operon_PRIMARY", Operon.OPERON.OPERON_ID);
        public static final UniqueKey<OperonTranscriptRecord> KEY_OPERON_TRANSCRIPT_PRIMARY = createUniqueKey(OperonTranscript.OPERON_TRANSCRIPT, "KEY_operon_transcript_PRIMARY", OperonTranscript.OPERON_TRANSCRIPT.OPERON_TRANSCRIPT_ID);
        public static final UniqueKey<PeptideArchiveRecord> KEY_PEPTIDE_ARCHIVE_PRIMARY = createUniqueKey(PeptideArchive.PEPTIDE_ARCHIVE, "KEY_peptide_archive_PRIMARY", PeptideArchive.PEPTIDE_ARCHIVE.PEPTIDE_ARCHIVE_ID);
        public static final UniqueKey<PredictionExonRecord> KEY_PREDICTION_EXON_PRIMARY = createUniqueKey(PredictionExon.PREDICTION_EXON, "KEY_prediction_exon_PRIMARY", PredictionExon.PREDICTION_EXON.PREDICTION_EXON_ID);
        public static final UniqueKey<PredictionTranscriptRecord> KEY_PREDICTION_TRANSCRIPT_PRIMARY = createUniqueKey(PredictionTranscript.PREDICTION_TRANSCRIPT, "KEY_prediction_transcript_PRIMARY", PredictionTranscript.PREDICTION_TRANSCRIPT.PREDICTION_TRANSCRIPT_ID);
        public static final UniqueKey<ProteinAlignFeatureRecord> KEY_PROTEIN_ALIGN_FEATURE_PRIMARY = createUniqueKey(ProteinAlignFeature.PROTEIN_ALIGN_FEATURE, "KEY_protein_align_feature_PRIMARY", ProteinAlignFeature.PROTEIN_ALIGN_FEATURE.PROTEIN_ALIGN_FEATURE_ID);
        public static final UniqueKey<ProteinFeatureRecord> KEY_PROTEIN_FEATURE_PRIMARY = createUniqueKey(ProteinFeature.PROTEIN_FEATURE, "KEY_protein_feature_PRIMARY", ProteinFeature.PROTEIN_FEATURE.PROTEIN_FEATURE_ID);
        public static final UniqueKey<ProteinFeatureRecord> KEY_PROTEIN_FEATURE_ALN_IDX = createUniqueKey(ProteinFeature.PROTEIN_FEATURE, "KEY_protein_feature_aln_idx", ProteinFeature.PROTEIN_FEATURE.TRANSLATION_ID, ProteinFeature.PROTEIN_FEATURE.HIT_NAME, ProteinFeature.PROTEIN_FEATURE.SEQ_START, ProteinFeature.PROTEIN_FEATURE.SEQ_END, ProteinFeature.PROTEIN_FEATURE.HIT_START, ProteinFeature.PROTEIN_FEATURE.HIT_END, ProteinFeature.PROTEIN_FEATURE.ANALYSIS_ID);
        public static final UniqueKey<RepeatConsensusRecord> KEY_REPEAT_CONSENSUS_PRIMARY = createUniqueKey(RepeatConsensus.REPEAT_CONSENSUS, "KEY_repeat_consensus_PRIMARY", RepeatConsensus.REPEAT_CONSENSUS.REPEAT_CONSENSUS_ID);
        public static final UniqueKey<RepeatFeatureRecord> KEY_REPEAT_FEATURE_PRIMARY = createUniqueKey(RepeatFeature.REPEAT_FEATURE, "KEY_repeat_feature_PRIMARY", RepeatFeature.REPEAT_FEATURE.REPEAT_FEATURE_ID);
        public static final UniqueKey<SeqRegionRecord> KEY_SEQ_REGION_PRIMARY = createUniqueKey(SeqRegion.SEQ_REGION, "KEY_seq_region_PRIMARY", SeqRegion.SEQ_REGION.SEQ_REGION_ID);
        public static final UniqueKey<SeqRegionRecord> KEY_SEQ_REGION_NAME_CS_IDX = createUniqueKey(SeqRegion.SEQ_REGION, "KEY_seq_region_name_cs_idx", SeqRegion.SEQ_REGION.NAME, SeqRegion.SEQ_REGION.COORD_SYSTEM_ID);
        public static final UniqueKey<SeqRegionAttribRecord> KEY_SEQ_REGION_ATTRIB_REGION_ATTRIBX = createUniqueKey(SeqRegionAttrib.SEQ_REGION_ATTRIB, "KEY_seq_region_attrib_region_attribx", SeqRegionAttrib.SEQ_REGION_ATTRIB.SEQ_REGION_ID, SeqRegionAttrib.SEQ_REGION_ATTRIB.ATTRIB_TYPE_ID, SeqRegionAttrib.SEQ_REGION_ATTRIB.VALUE);
        public static final UniqueKey<SeqRegionSynonymRecord> KEY_SEQ_REGION_SYNONYM_PRIMARY = createUniqueKey(SeqRegionSynonym.SEQ_REGION_SYNONYM, "KEY_seq_region_synonym_PRIMARY", SeqRegionSynonym.SEQ_REGION_SYNONYM.SEQ_REGION_SYNONYM_ID);
        public static final UniqueKey<SeqRegionSynonymRecord> KEY_SEQ_REGION_SYNONYM_SYN_IDX = createUniqueKey(SeqRegionSynonym.SEQ_REGION_SYNONYM, "KEY_seq_region_synonym_syn_idx", SeqRegionSynonym.SEQ_REGION_SYNONYM.SYNONYM, SeqRegionSynonym.SEQ_REGION_SYNONYM.SEQ_REGION_ID);
        public static final UniqueKey<SimpleFeatureRecord> KEY_SIMPLE_FEATURE_PRIMARY = createUniqueKey(SimpleFeature.SIMPLE_FEATURE, "KEY_simple_feature_PRIMARY", SimpleFeature.SIMPLE_FEATURE.SIMPLE_FEATURE_ID);
        public static final UniqueKey<StableIdEventRecord> KEY_STABLE_ID_EVENT_UNI_IDX = createUniqueKey(StableIdEvent.STABLE_ID_EVENT, "KEY_stable_id_event_uni_idx", StableIdEvent.STABLE_ID_EVENT.MAPPING_SESSION_ID, StableIdEvent.STABLE_ID_EVENT.OLD_STABLE_ID, StableIdEvent.STABLE_ID_EVENT.NEW_STABLE_ID, StableIdEvent.STABLE_ID_EVENT.TYPE);
        public static final UniqueKey<SupportingFeatureRecord> KEY_SUPPORTING_FEATURE_ALL_IDX = createUniqueKey(SupportingFeature.SUPPORTING_FEATURE, "KEY_supporting_feature_all_idx", SupportingFeature.SUPPORTING_FEATURE.EXON_ID, SupportingFeature.SUPPORTING_FEATURE.FEATURE_TYPE, SupportingFeature.SUPPORTING_FEATURE.FEATURE_ID);
        public static final UniqueKey<TranscriptRecord> KEY_TRANSCRIPT_PRIMARY = createUniqueKey(Transcript.TRANSCRIPT, "KEY_transcript_PRIMARY", Transcript.TRANSCRIPT.TRANSCRIPT_ID);
        public static final UniqueKey<TranscriptRecord> KEY_TRANSCRIPT_CANONICAL_TRANSLATION_IDX = createUniqueKey(Transcript.TRANSCRIPT, "KEY_transcript_canonical_translation_idx", Transcript.TRANSCRIPT.CANONICAL_TRANSLATION_ID);
        public static final UniqueKey<TranscriptAttribRecord> KEY_TRANSCRIPT_ATTRIB_TRANSCRIPT_ATTRIBX = createUniqueKey(TranscriptAttrib.TRANSCRIPT_ATTRIB, "KEY_transcript_attrib_transcript_attribx", TranscriptAttrib.TRANSCRIPT_ATTRIB.TRANSCRIPT_ID, TranscriptAttrib.TRANSCRIPT_ATTRIB.ATTRIB_TYPE_ID, TranscriptAttrib.TRANSCRIPT_ATTRIB.VALUE);
        public static final UniqueKey<TranscriptIntronSupportingEvidenceRecord> KEY_TRANSCRIPT_INTRON_SUPPORTING_EVIDENCE_PRIMARY = createUniqueKey(TranscriptIntronSupportingEvidence.TRANSCRIPT_INTRON_SUPPORTING_EVIDENCE, "KEY_transcript_intron_supporting_evidence_PRIMARY", TranscriptIntronSupportingEvidence.TRANSCRIPT_INTRON_SUPPORTING_EVIDENCE.INTRON_SUPPORTING_EVIDENCE_ID, TranscriptIntronSupportingEvidence.TRANSCRIPT_INTRON_SUPPORTING_EVIDENCE.TRANSCRIPT_ID);
        public static final UniqueKey<TranscriptSupportingFeatureRecord> KEY_TRANSCRIPT_SUPPORTING_FEATURE_ALL_IDX = createUniqueKey(TranscriptSupportingFeature.TRANSCRIPT_SUPPORTING_FEATURE, "KEY_transcript_supporting_feature_all_idx", TranscriptSupportingFeature.TRANSCRIPT_SUPPORTING_FEATURE.TRANSCRIPT_ID, TranscriptSupportingFeature.TRANSCRIPT_SUPPORTING_FEATURE.FEATURE_TYPE, TranscriptSupportingFeature.TRANSCRIPT_SUPPORTING_FEATURE.FEATURE_ID);
        public static final UniqueKey<TranslationRecord> KEY_TRANSLATION_PRIMARY = createUniqueKey(Translation.TRANSLATION, "KEY_translation_PRIMARY", Translation.TRANSLATION.TRANSLATION_ID);
        public static final UniqueKey<TranslationAttribRecord> KEY_TRANSLATION_ATTRIB_TRANSLATION_ATTRIBX = createUniqueKey(TranslationAttrib.TRANSLATION_ATTRIB, "KEY_translation_attrib_translation_attribx", TranslationAttrib.TRANSLATION_ATTRIB.TRANSLATION_ID, TranslationAttrib.TRANSLATION_ATTRIB.ATTRIB_TYPE_ID, TranslationAttrib.TRANSLATION_ATTRIB.VALUE);
        public static final UniqueKey<UnmappedObjectRecord> KEY_UNMAPPED_OBJECT_PRIMARY = createUniqueKey(UnmappedObject.UNMAPPED_OBJECT, "KEY_unmapped_object_PRIMARY", UnmappedObject.UNMAPPED_OBJECT.UNMAPPED_OBJECT_ID);
        public static final UniqueKey<UnmappedObjectRecord> KEY_UNMAPPED_OBJECT_UNIQUE_UNMAPPED_OBJ_IDX = createUniqueKey(UnmappedObject.UNMAPPED_OBJECT, "KEY_unmapped_object_unique_unmapped_obj_idx", UnmappedObject.UNMAPPED_OBJECT.ENSEMBL_ID, UnmappedObject.UNMAPPED_OBJECT.ENSEMBL_OBJECT_TYPE, UnmappedObject.UNMAPPED_OBJECT.IDENTIFIER, UnmappedObject.UNMAPPED_OBJECT.UNMAPPED_REASON_ID, UnmappedObject.UNMAPPED_OBJECT.PARENT, UnmappedObject.UNMAPPED_OBJECT.EXTERNAL_DB_ID);
        public static final UniqueKey<UnmappedReasonRecord> KEY_UNMAPPED_REASON_PRIMARY = createUniqueKey(UnmappedReason.UNMAPPED_REASON, "KEY_unmapped_reason_PRIMARY", UnmappedReason.UNMAPPED_REASON.UNMAPPED_REASON_ID);
        public static final UniqueKey<XrefRecord> KEY_XREF_PRIMARY = createUniqueKey(Xref.XREF, "KEY_xref_PRIMARY", Xref.XREF.XREF_ID);
        public static final UniqueKey<XrefRecord> KEY_XREF_ID_INDEX = createUniqueKey(Xref.XREF, "KEY_xref_id_index", Xref.XREF.DBPRIMARY_ACC, Xref.XREF.EXTERNAL_DB_ID, Xref.XREF.INFO_TYPE, Xref.XREF.INFO_TEXT, Xref.XREF.VERSION);
    }
}
