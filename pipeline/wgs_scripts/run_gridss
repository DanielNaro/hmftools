#!/bin/bash

tools_dir=$1 && shift
tumor_id=$1 && shift
tumor_bam=$1 && shift
reference_id=$1 && shift
reference_bam=$1 && shift
output_dir=$1 && shift
ref_genome_version=$1 && shift
ref_genome=$1 && shift
sv_blacklist_bed=$1 && shift
known_fusion_bed=$1 && shift
gridss_blacklist_bed=$1 && shift
gridss_config=$1 && shift
threads=$1 && shift
max_memory=$1 && shift

if [[ ! -d "${output_dir}" ]]; then
  mkdir ${output_dir}
fi

output_vcf=${output_dir}/${tumor_id}.gridss.unfiltered.vcf.gz

if [[ -f "${output_vcf}" ]]; then
  echo "Skipping Gridss for ${tumor_id}, since VCF ${output_vcf} exists"
  exit
fi

sv_prep_jar=${tools_dir}/sv-prep.jar
gridss_script=${tools_dir}/gridss.run.sh
gridss_jar=${tools_dir}/gridss.jar

echo "Running SvPrep for ${tumor_id}, output dir ${output_dir}"

java -jar ${sv_prep_jar} -sample ${tumor_id} \
  -bam_file ${tumor_bam} \
  -ref_genome ${ref_genome} \
  -ref_genome_version ${ref_genome_version} \
  -blacklist_bed ${sv_blacklist_bed} \
  -known_fusion_bed ${known_fusion_bed} \
  -write_types "JUNCTIONS;BAM;FRAGMENT_LENGTH_DIST" \
  -output_dir ${output_dir} \
  -threads ${threads}

#echo ${args}
#java -jar ${sv_prep_jar} ${args}

sv_prep_tumor_bam=${output_dir}/${tumor_id}.sv_prep.bam
sv_prep_tumor_sorted_bam=${output_dir}/${tumor_id}.sv_prep.sorted.bam

samtools sort -O bam ${sv_prep_tumor_bam} -o ${sv_prep_tumor_sorted_bam}
samtools index ${sv_prep_tumor_sorted_bam}
# rm ${sv_prep_tumor_bam}

tumor_junction_file=${output_dir}/${tumor_id}.sv_prep.junctions.csv

java -jar ${sv_prep_jar} \
  -sample ${reference_id} \
  -bam_file ${reference_bam} \
  -ref_genome ${ref_genome} \
  -ref_genome_version ${ref_genome_version} \
  -blacklist_bed ${sv_blacklist_bed} \
  -known_fusion_bed ${known_fusion_bed} \
  -existing_junction_file ${tumor_junction_file} \
  -calc_fragment_length \
  -output_dir ${output_dir} \
  -threads ${threads} \

sv_prep_ref_bam=${output_dir}/${reference_id}.sv_prep.bam
sv_prep_ref_sorted_bam=${output_dir}/${reference_id}.sv_prep.sorted.bam

samtools sort -O bam ${sv_prep_ref_bam} -o ${sv_prep_ref_sorted_bam}
samtools index ${sv_prep_ref_sorted_bam}
# rm ${sv_prep_ref_bam}


echo "Running Gridss for ${tumor_id}, output dir ${output_dir}"

# gridss_app=${tools_dir}/gridss/gridss

gridss_vcf=${output_dir}/${tumor_id}.gridss.pre_depth.vcf.gz

${gridss_script} --jar ${gridss_jar} \
  --steps all \
  --workingdir ${output_dir}/gridss \
  --reference ${ref_genome} \
  --blacklist ${gridss_blacklist_bed} \
  --configuration ${gridss_config} \
  --labels "${reference_id},${tumor_id}" \
  --bams "${reference_bam},${tumor_bam}" \
  --filtered_bams "${sv_prep_ref_sorted_bam},${sv_prep_tumor_sorted_bam}" \
  --output ${gridss_vcf} \
  --jvmheap ${max_memory}G \
  --threads ${threads}  \


echo "Running SvPrep reference depth"

final_vcf=${output_dir}/${tumor_id}.gridss.unfiltered.vcf.gz

java -cp ${sv_prep_jar} com.hartwig.hmftools.svprep.depth.DepthAnnotator \
  -input_vcf ${gridss_vcf} \
  -output_vcf ${final_vcf} \
  -samples "${reference_id},${tumor_id}" \
  -bam_files "${reference_bam},${tumor_bam}" \
  -ref_genome ${ref_genome} \
  -ref_genome_version ${ref_genome_version} \
  -threads ${threads} \

rm ${gridss_vcf}

